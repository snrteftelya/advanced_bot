import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from bs4 import BeautifulSoup
import requests
import datetime
import time
from aiogram import Bot, Dispatcher, executor, types
from sqlite_db import Database
from config import token, open_weather_token
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hunderline, hcode
from main import check_news_update
from main import sport_class, world_class, society_class, economy_class, politics_class, regions_class, accident_class
from main import president_class, kaleidoscope_class
from main import technological_class, cultural_class


storage = MemoryStorage()
bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)

class registration(StatesGroup):
    user_name = State()




@dp.message_handler(commands="start", state=None)
async def start(message: types.Message, state: FSMContext):
    start_buttons = ["–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüíµ", "–ü–æ–≥–æ–¥–∞\U00002601"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–ù–æ–≤–æ—Å—Ç–∏üì∞")
    await state.finish()
    await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –º–µ–Ω—é', reply_markup=keyboard)




@dp.message_handler(lambda message: '–º–µ–Ω—é' in message.text, state="*")
async def start(message: types.Message, state: FSMContext):
    start_buttons = ["–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüíµ", "–ü–æ–≥–æ–¥–∞\U00002601"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–ù–æ–≤–æ—Å—Ç–∏üì∞")
    await state.finish()
    await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –º–µ–Ω—é', reply_markup=keyboard)



class weather_get(StatesGroup):
    weather_country = State()
    weather_region = State()

@dp.message_handler(lambda message: '–ü–æ–≥–æ–¥–∞' in message.text, state=None)
async def weather(message: types.Message, state: FSMContext):
    start_buttons = ["–ë–µ–ª–∞—Ä—É—Å—åüáßüáæ", "–†–æ—Å—Å–∏—èüá∑üá∫"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–í –º–µ–Ω—é‚û°")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É", reply_markup=keyboard)
    await weather_get.weather_country.set()


@dp.message_handler(lambda message: '–ë–µ–ª–∞—Ä—É—Å—å' in message.text, state=weather_get.weather_country)
async def get_keyboard_belarus(message: types.Message, state: FSMContext):
    start_buttons = ["–ë—Ä–µ—Å—Ç", "–í–∏—Ç–µ–±—Å–∫", "–ì–æ–º–µ–ª—å", "–ì—Ä–æ–¥–Ω–æ", "–ú–æ–≥–∏–ª—ë–≤", "–ú–∏–Ω—Å–∫"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–í –º–µ–Ω—é‚û°")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=keyboard)
    await weather_get.weather_region.set()


@dp.message_handler(Text(equals=["–ë—Ä–µ—Å—Ç", "–í–∏—Ç–µ–±—Å–∫", "–ì–æ–º–µ–ª—å", "–ì—Ä–æ–¥–Ω–æ", "–ú–æ–≥–∏–ª—ë–≤", "–ú–∏–Ω—Å–∫"]),\
                    state=weather_get.weather_region)
async def get_weather_belarus(message: types.Message, state: FSMContext):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
    )
    data = r.json()

    city = data["name"]
    cur_weather = data["main"]["temp"]

    weather_description = data["weather"][0]["main"]
    if weather_description in code_to_smile:
        wd = code_to_smile[weather_description]
    else:
        wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

    humidity = data["main"]["humidity"]
    wind = data["wind"]["speed"]
    date_time = str(datetime.datetime.utcnow() + datetime.timedelta(hours=3))
    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"]) + datetime.timedelta(hours=3)
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) + datetime.timedelta(hours=3)
    length_of_the_day = sunset_timestamp - sunrise_timestamp
    start_buttons = ["–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüíµ", "–ü–æ–≥–æ–¥–∞\U00002601"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–ù–æ–≤–æ—Å—Ç–∏üì∞")
    await message.answer(f"{(date_time[0:17])}\n"
          f"–ì–æ—Ä–æ–¥: {hbold(city)}\n"
          f"{wd}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {hunderline(cur_weather)}{hunderline('C¬∞')}\n"
          f"–í–µ—Ç–µ—Ä: {wind} –º/—Å\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
          f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp.strftime('%H:%M')}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp.strftime('%H:%M')}\n"
          f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n", reply_markup=keyboard
        )
    await state.finish()



@dp.message_handler(lambda message: '–†–æ—Å—Å–∏—è' in message.text, state=weather_get.weather_country)
async def get_keyboard_russia(message: types.Message, state: FSMContext):
    start_buttons1 = ["–ú–æ—Å–∫–≤–∞","–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
    start_buttons2 = ["–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"]
    start_buttons3 =  ["–ö–∞–∑–∞–Ω—å", "–ò—Ä–∫—É—Ç—Å–∫", "–¢—é–º–µ–Ω—å"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(*start_buttons1).row(*start_buttons2).row(*start_buttons3).insert("–í –º–µ–Ω—é‚û°")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=keyboard)
    await weather_get.weather_region.set()



@dp.message_handler(Text(equals=["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ò—Ä–∫—É—Ç—Å–∫",\
                                 "–¢—é–º–µ–Ω—å"]), state=weather_get.weather_region)
async def get_weather_russia(message: types.Message, state: FSMContext):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
    )
    data = r.json()

    city = data["name"]
    cur_weather = data["main"]["temp"]

    weather_description = data["weather"][0]["main"]
    if weather_description in code_to_smile:
        wd = code_to_smile[weather_description]
    else:
        wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

    humidity = data["main"]["humidity"]
    wind = data["wind"]["speed"]
    date_time = str(datetime.datetime.utcnow() + datetime.timedelta(hours=3))
    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"]) + datetime.timedelta(hours=3)
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) + datetime.timedelta(hours=3)
    length_of_the_day = sunset_timestamp - sunrise_timestamp
    start_buttons = ["–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüíµ", "–ü–æ–≥–æ–¥–∞\U00002601"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–ù–æ–≤–æ—Å—Ç–∏üì∞")
    await message.answer(f"{(date_time[0:17])}\n"
          f"–ì–æ—Ä–æ–¥: {hbold(city)}\n"
          f"{wd}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {hunderline(cur_weather)}{hunderline('C¬∞')}\n"
          f"–í–µ—Ç–µ—Ä: {wind} –º/—Å\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
          f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp.strftime('%H:%M')}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp.strftime('%H:%M')}\n"
          f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n", reply_markup=keyboard
        )
    await state.finish()




@dp.message_handler(lambda message: '–ù–æ–≤–æ—Å—Ç–∏' in message.text)
async def get_keyboard_news(message: types.Message):
    news_buttons1 = ["–°–ø–æ—Ä—ÇüèÄ", "–í –º–∏—Ä–µüó∫Ô∏è", "–û–±—â–µ—Å—Ç–≤–æüë´"]
    news_buttons2 = ["–≠–∫–æ–Ω–æ–º–∏–∫–∞üí∏", "–ü–æ–ª–∏—Ç–∏–∫–∞ü§¥", "–†–µ–≥–∏–æ–Ω—ãüáßüáæ"]
    news_buttons3 = ["–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—èüí•", "–ö–∞–ª–µ–π–¥–æ—Å–∫–æ–øü§™"]
    news_buttons4 = ["–ü—Ä–µ–∑–∏–¥–µ–Ω—Çüë®‚Äçüíº", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏‚Äçüíª", "–ö—É–ª—å—Ç—É—Ä–∞üïØÔ∏è"]
    news_buttons5 = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5Ô∏è‚É£", "–í –º–µ–Ω—é‚û°"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*news_buttons1).row(*news_buttons2).row(*news_buttons3).row(*news_buttons4).row(*news_buttons5)
    await message.answer("–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä—É–±—Ä–∏–∫–∞–º:", reply_markup=keyboard)


@dp.message_handler(lambda message: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ' in message.text)
async def last_news(message: types.Message):
    headers = {
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36"
    }

    url = "https://www.belta.by/all_news/"
    r = requests.get(url=url, headers=headers)
    soup = BeautifulSoup(r.text, "lxml")
    articles_cards = soup.find_all(class_="news_item lenta_item")
    for article in articles_cards[:5]:
        article_title = article.find("span", class_="lenta_item_title").text.strip()
        article_href = article.find_all("a")[1].get("href")

        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')



async def news_every_minute():
    while True:
        fresh_news = check_news_update()

        if len(fresh_news) >= 1:
            for k, v in sorted(fresh_news.items()):
                news = f"{hbold(v['date_time'])}" \
                       f"{hbold(v['article_time'])}\n\n" \
                       f"#{v['article_topic']}\n\n" \
                       f"{v['article_title']}\n\n" \
                       f"{v['article_url']}"
                #await bot.send_message(id, news, disable_notification=True)

        await asyncio.sleep(40)





@dp.message_handler(lambda message: '–°–ø–æ—Ä—Ç' in message.text)
async def sport_news(message: types.Message):
    for article in sport_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')

@dp.message_handler(lambda message: '–í –º–∏—Ä–µ' in message.text)
async def world_news(message: types.Message):
    for article in world_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


@dp.message_handler(lambda message: '–û–±—â–µ—Å—Ç–≤–æ' in message.text)
async def society_news(message: types.Message):
    for article in society_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


@dp.message_handler(lambda message: '–≠–∫–æ–Ω–æ–º–∏–∫–∞' in message.text)
async def economy_news(message: types.Message):
    for article in economy_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


@dp.message_handler(lambda message: '–ü–æ–ª–∏—Ç–∏–∫–∞' in message.text)
async def politics_news(message: types.Message):
    for article in politics_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


@dp.message_handler(lambda message: '–†–µ–≥–∏–æ–Ω—ã' in message.text)
async def regions_news(message: types.Message):
    for article in regions_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


@dp.message_handler(lambda message: '–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è' in message.text)
async def accident_news(message: types.Message):
    for article in accident_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


@dp.message_handler(lambda message: '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç' in message.text)
async def president_news(message: types.Message):
    for article in president_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')



@dp.message_handler(lambda message: '–ö–∞–ª–µ–π–¥–æ—Å–∫–æ–ø' in message.text)
async def kaleidoscope_news(message: types.Message):
    for article in kaleidoscope_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


@dp.message_handler(lambda message: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' in message.text)
async def technological_news(message: types.Message):
    for article in technological_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


@dp.message_handler(lambda message: '–ö—É–ª—å—Ç—É—Ä–∞' in message.text)
async def cultural_news(message: types.Message):
    for article in cultural_class()[:5]:
        article_href = article.find('a').get('href')
        article_title = article.find('a').get('title')
        await message.answer(f'{article_title}\n\n'
                             f'https://www.belta.by{(article_href)}')


class curses(StatesGroup):
    curses_region = State()



@dp.message_handler(lambda message: '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç' in message.text, state=None)
async def get_curses_keyboard(message: types.Message, state: FSMContext):
    #start_buttons = ["brest", "vitebsk", "gomel", "mogilev", "minsk"]
    start_buttons = ["–ë—Ä–µ—Å—Ç", "–í–∏—Ç–µ–±—Å–∫", "–ì–æ–º–µ–ª—å", "–ì—Ä–æ–¥–Ω–æ", "–ú–æ–≥–∏–ª—ë–≤", "–ú–∏–Ω—Å–∫"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–í –º–µ–Ω—é‚û°")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=keyboard)
    await curses.curses_region.set()




@dp.message_handler(Text(equals='–ì—Ä–æ–¥–Ω–æ'), state=curses.curses_region)
async def get_curses_grodno(message: types.Message, state: FSMContext):
    listik = []
    headers = {
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36"
    }
    url = f"https://myfin.by/currency/usd/grodno"
    req = requests.get(url=url, headers=headers)
    soup = BeautifulSoup(req.text, "lxml")
    articles_cards = soup.find_all('td')
    currency = soup.find('tbody').find_all('td')
    date = soup.find('h1').text.strip()
    date1 = date[:5]
    date2 = date[13:22]
    date3 = date[29::]
    for element in articles_cards:
        element = element.text.strip()
        listik.append(element)
    usd_in = listik[1]
    usd_out = listik[2]
    value_list = (
     f'{hbold("*" + date1 + date2 + date3 + "*")}\n\n'
     f'–ü–æ–∫—É–ø–∫–∞ USD: {hcode(usd_in[:4] + " BYN")}\n'
     f'–ü—Ä–æ–¥–∞–∂–∞ USD: {hcode(usd_out[:4] + " BYN")}\n\n'
     f'–ü–æ–∫—É–ø–∫–∞ EUR: {hcode(listik[4] + " BYN")}\n'
     f'–ü—Ä–æ–¥–∞–∂–∞ EUR: {hcode(listik[5] + " BYN")}\n\n'
     f'–ü–æ–∫—É–ø–∫–∞ 10 PLN: {hcode(listik[7] + " BYN")}\n'
     f'–ü—Ä–æ–¥–∞–∂–∞ 10 PLN: {hcode(listik[8] + " BYN")}\n\n'
    )
    start_buttons = ["–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüíµ", "–ü–æ–≥–æ–¥–∞\U00002601"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–ù–æ–≤–æ—Å—Ç–∏üì∞")
    await message.answer(value_list, reply_markup=keyboard)
    await state.finish()








@dp.message_handler(Text(equals=["–ë—Ä–µ—Å—Ç", "–í–∏—Ç–µ–±—Å–∫", "–ì–æ–º–µ–ª—å", "–ú–æ–≥–∏–ª—ë–≤", "–ú–∏–Ω—Å–∫"]), state=curses.curses_region)
async def get_curses(message: types.Message, state: FSMContext):
    headers = {
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36"
    }
    if message.text == '–ë—Ä–µ—Å—Ç':
        city = 'brest'
    if message.text == '–í–∏—Ç–µ–±—Å–∫':
        city = 'vitebsk'
    if message.text == '–ì–æ–º–µ–ª—å':
        city = 'gomel'
    if message.text == '–ú–æ–≥–∏–ª—ë–≤':
        city = 'mogilev'
    if message.text == '–ú–∏–Ω—Å–∫':
        city = 'minsk'
    url = f"https://myfin.by/currency/usd/{city}"
    req = requests.get(url=url, headers=headers)
    soup = BeautifulSoup(req.text, "lxml")
    articles_cards = soup.find("tbody")
    currency = soup.find('tbody').find_all('td')
    date = soup.find('h1').text.strip()
    date1 = date[:5]
    date2 = date[13:22]
    date3 = date[31::]
    value_list = (
     f'{hbold("*" + date1 + date2 + date3 + "*")}\n\n'
     f'–ü–æ–∫—É–ø–∫–∞ USD: {hcode(currency[1].text.strip() + " BYN")}\n'
     f'–ü—Ä–æ–¥–∞–∂–∞ USD: {hcode(currency[2].text.strip() + " BYN")}\n\n'
     f'–ü–æ–∫—É–ø–∫–∞ EUR: {hcode(currency[6].text.strip() + " BYN")}\n'
     f'–ü—Ä–æ–¥–∞–∂–∞ EUR: {hcode(currency[7].text.strip() + " BYN")}\n\n'
     f'–ü–æ–∫—É–ø–∫–∞ 100 RUB: {hcode(currency[11].text.strip() + " BYN")}\n'
     f'–ü—Ä–æ–¥–∞–∂–∞ 100 RUB: {hcode(currency[12].text.strip() + " BYN")}\n\n'
     f'–ü–æ–∫—É–ø–∫–∞ 10 PLN: {hcode(currency[16].text.strip() + " BYN")}\n'
     f'–ü—Ä–æ–¥–∞–∂–∞ 10 PLN: {hcode(currency[17].text.strip() + " BYN")}\n\n'
     f'–ü–æ–∫—É–ø–∫–∞ 100 UAH: {hcode(currency[21].text.strip() + " BYN")}\n'
     f'–ü—Ä–æ–¥–∞–∂–∞ 100 UAH: {hcode(currency[22].text.strip() + " BYN")}\n'
    )
    start_buttons = ["–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüíµ", "–ü–æ–≥–æ–¥–∞\U00002601"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons).insert("–ù–æ–≤–æ—Å—Ç–∏üì∞")
    await message.answer(value_list, reply_markup=keyboard)
    await state.finish()

@dp.message_handler()
async def none_func(message: types.Message):
    await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start\n\n\nP.S. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç(')





if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(news_every_minute())
    while True:
        try:
            executor.start_polling(dp, skip_updates=True)
        except:
            time.sleep(5)